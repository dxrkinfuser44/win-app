name: Release - build windows EXE and create GitHub Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-release-windows:
    name: Build & Release (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # change to your target SDK

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Publish single-file self-contained exe (x64)
        run: |
          dotnet publish src/ProtonVpn.App/ProtonVpn.App.csproj -c Release -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=false -p:PublishReadyToRun=true --self-contained true -o artifacts/win-x64
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: List artifacts (debug)
        run: dir artifacts\win-x64

      - name: Optional: Decode signing PFX (if secret present)
        if: ${{ secrets.SIGNING_PFX != '' }}
        shell: pwsh
        run: |
          Write-Host "Decoding SIGNING_PFX..."
          $pfxBase64 = "${{ secrets.SIGNING_PFX }}"
          $pfxBytes = [System.Convert]::FromBase64String($pfxBase64)
          $outPath = "$(Build.ArtifactStagingDirectory)\signing.pfx"
          [System.IO.File]::WriteAllBytes($outPath, $pfxBytes)
          Write-Host "PFX written to $outPath"
        env:
          Build_ArtifactStagingDirectory: ${{ github.workspace }}

      - name: Optional: Sign exe with signtool
        if: ${{ secrets.SIGNING_PFX != '' }}
        shell: pwsh
        run: |
          $exe = Get-ChildItem artifacts\win-x64\*.exe | Select-Object -First 1
          if ($null -eq $exe) { Write-Error "No exe found to sign"; exit 1 }
          $pfxPath = "$(Build.ArtifactStagingDirectory)\signing.pfx"
          $pfxPassword = "${{ secrets.SIGNING_PASSWORD }}"
          Write-Host "Signing $($exe.FullName)..."
          & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign /fd SHA256 /a /f $pfxPath /p $pfxPassword /tr http://timestamp.digicert.com /td SHA256 $exe.FullName
        env:
          Build_ArtifactStagingDirectory: ${{ github.workspace }}

      - name: Create ZIP artifact
        shell: pwsh
        run: |
          $zip = "artifacts/ProtonVpn-windows-x64-${{ github.ref_name }}.zip"
          if (Test-Path $zip) { Remove-Item $zip }
          Compress-Archive -Path artifacts\win-x64\* -DestinationPath $zip
          Write-Host "ZIP created: $zip"

      - name: Create GitHub Release and upload artifact
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: Release built by GitHub Actions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "artifacts/ProtonVpn-windows-x64-${{ github.ref_name }}.zip"
          asset_name: "ProtonVpn-windows-x64-${{ github.ref_name }}.zip"
          asset_content_type: application/zip
